name: ghostfolio
services:
  nginx:
    build: ./nginx-modsec
    image: nginx-modsec:latest
    container_name: gf-nginx
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./letsencrypt:/etc/letsencrypt
      - ./modsec:/etc/nginx/modsec  # Directory per le configurazioni ModSecurity
      # - ./modsec/crs:/etc/nginx/modsec/crs  # Regole CRS
    environment:
      - MODSEC_ENABLE=ON
      - MODSEC_RULE_ENGINE=DetectionOnly  # Modalit√† iniziale di testing
    depends_on:
      - ghostfolio
    # Healthcheck aggiuntivo per ModSecurity
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost/modsecurity-status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  ghostfolio:
    image: docker.io/ghostfolio/ghostfolio:latest
    container_name: ghostfolio
    restart: unless-stopped
    init: true
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:3333/api/v1/health']
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: docker.io/library/postgres:15-alpine
    container_name: gf-postgres
    restart: unless-stopped
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_READ_SEARCH
      - FOWNER
      - SETGID
      - SETUID
    security_opt:
      - no-new-privileges:true
    env_file:
      - .env
    healthcheck:
      test:
        ['CMD-SHELL', 'pg_isready -d "$${POSTGRES_DB}" -U $${POSTGRES_USER}']
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres:/var/lib/postgresql/data

  redis:
    image: docker.io/library/redis:alpine
    container_name: gf-redis
    restart: unless-stopped
    user: '999:1000'
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    env_file:
      - .env
    command:
      - /bin/sh
      - -c
      - redis-server --requirepass "$${REDIS_PASSWORD:?REDIS_PASSWORD variable is not set}"
    healthcheck:
      test:
        ['CMD-SHELL', 'redis-cli --pass "$${REDIS_PASSWORD}" ping | grep PONG']
      interval: 10s
      timeout: 5s
      retries: 5

  ghostfolio-feeder:
    container_name: gf-feeder
    build:
      context: ./feeder
    env_file:
      - ./feeder/.env
    restart: unless-stopped
    volumes:
      - .feeder.json:/app/data/profiles.json:ro
    depends_on:
      ghostfolio:
        condition: service_healthy

  certbot:
    image: certbot/certbot
    container_name: gf-certbot
    volumes:
      - ./letsencrypt:/etc/letsencrypt
      - ./letsencrypt/lib:/var/lib/letsencrypt
      - ./letsencrypt/log:/var/log/letsencrypt
    entrypoint: /bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'
    depends_on:
      - nginx

volumes:
  postgres:
