name: ghostfolio
services:
  ghostfolio:
    image: docker.io/ghostfolio/ghostfolio:latest
    container_name: ghostfolio
    restart: unless-stopped
    init: true
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    env_file:
      - .env
    # ports:
    #   - 3333:3333
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ghostfolio.rule=Host(`ghostfolio.myhomecloud.it`)"
      - "traefik.http.routers.ghostfolio.entrypoints=websecure"
      - "traefik.http.routers.ghostfolio.tls.certresolver=leresolver"
      - "traefik.http.services.ghostfolio.loadbalancer.server.port=3333"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ghostnet
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:3333/api/v1/health']
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: docker.io/library/postgres:15-alpine
    container_name: gf-postgres
    restart: unless-stopped
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_READ_SEARCH
      - FOWNER
      - SETGID
      - SETUID
    security_opt:
      - no-new-privileges:true
    env_file:
      - .env
    healthcheck:
      test:
        ['CMD-SHELL', 'pg_isready -d "$${POSTGRES_DB}" -U $${POSTGRES_USER}']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ghostnet
    volumes:
      - postgres:/var/lib/postgresql/data

  redis:
    image: docker.io/library/redis:alpine
    container_name: gf-redis
    restart: unless-stopped
    user: '999:1000'
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    env_file:
      - .env
    command:
      - /bin/sh
      - -c
      - redis-server --requirepass "$${REDIS_PASSWORD:?REDIS_PASSWORD variable is not set}"
    networks:
      - ghostnet
    healthcheck:
      test:
        ['CMD-SHELL', 'redis-cli --pass "$${REDIS_PASSWORD}" ping | grep PONG']
      interval: 10s
      timeout: 5s
      retries: 5

  ghostfolio-feeder:
    container_name: gf-feeder
    build:
      context: ./feeder
    env_file:
      - ./feeder/.env
    restart: unless-stopped
    volumes:
      - ./feeder.json:/app/data/profiles.json:ro
    depends_on:
      ghostfolio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "test", "-f", "/app/data/profiles.json"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - ghostnet

volumes:
  postgres:

networks:
  ghostnet:
    external: true